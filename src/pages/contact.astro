---
import { default as Layout } from "@/src/layouts/static-layout.astro";

export const prerender = false;

const TURNSTILE_SITE_KEY = import.meta.env.TURNSTILE_SITE_KEY;
const TURNSTILE_SECRET_KEY = import.meta.env.TURNSTILE_SECRET_KEY;

let errors = {
    name: "",
    email: "",
    msg: "",
    turnstile: "",
};
let submitted = false;
let submitSuccess = false;
let errorMessage = "";

if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const name = data.get("name");
        if (typeof name !== "string" || name.trim() === "") {
            errors.name = "名前は必須です。";
        }
        const email = data.get("email");
        if (typeof email !== "string" || email.trim() === "") {
            errors.email = "メールアドレスは必須です。";
        } else if (!email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
            errors.email = "有効なメールアドレスを入力してください。";
        }
        const msg = data.get("msg");
        if (typeof msg !== "string" || msg.trim() === "") {
            errors.msg = "お問い合わせ内容は必須です。";
        } else if (!msg.match(/[\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]/)) {
            errors.msg =
                "スパム防止のため、必ず日本語を含む文章を入力するようお願い致します。";
        }

        // Turnstileトークンの検証
        const token = data.get("cf-turnstile-response");
        if (!token) {
            errors.turnstile = "ロボットでないことを確認してください。";
        } else {
            // Turnstileトークンをサーバーサイドで検証
            const formData = new FormData();
            formData.append("secret", TURNSTILE_SECRET_KEY);
            formData.append("response", token.toString());
            formData.append(
                "remoteip",
                Astro.request.headers.get("CF-Connecting-IP") || ""
            );

            const turnstileResult = await fetch(
                "https://challenges.cloudflare.com/turnstile/v0/siteverify",
                {
                    method: "POST",
                    body: formData,
                }
            );

            const outcome = (await turnstileResult.json()) as {
                success: boolean;
                "error-codes": string[];
                challenge_ts: string;
                hostname: string;
            };

            if (!outcome.success) {
                errors.turnstile =
                    "認証に失敗しました。もう一度お試しください。";
            }
        }

        const hasErrors = Object.values(errors).some((msg) => msg);
        if (!hasErrors) {
            // ここで実際にメール送信処理を実行
            const response = await sendForm(
                name as string,
                email as string,
                msg as string
            );
            submitted = true;
            if (response.status === 200) {
                submitSuccess = true;
            } else {
                errorMessage = await response.text();
            }
        }
    } catch (e) {
        submitted = true;
        submitSuccess = false;
        if (e instanceof Error) {
            console.error(e.message);
            errorMessage =
                "送信処理中にエラーが発生しました。後ほど再度お試しください。";
        }
    }
}

async function sendForm(name: string, email: string, msg: string) {
    try {
        const googleFormUrl =
            "https://docs.google.com/forms/d/e/1FAIpQLSchtw1jUUb-myThkbJWbDBnRqXXuKHVhFwQ8RMNS9iZ8vUt7Q/formResponse";
        const googleFormData = new FormData();
        googleFormData.append("entry.1687999543", name); // nameフィールド用のエントリーID
        googleFormData.append("entry.943302473", email); // emailフィールド用のエントリーID
        googleFormData.append("entry.1694948814", msg); // messageフィールド用のエントリーID
        const response = await fetch(googleFormUrl, {
            method: "POST",
            body: googleFormData,
        });
        if (response.ok) {
            return new Response("送信が完了しました。", { status: 200 });
        } else {
            console.error(await response.text());
            return new Response("送信に失敗しました。", { status: 500 });
        }
    } catch (e) {
        console.error(e);
        return new Response("送信に失敗しました。", { status: 500 });
    }
}
---

<Layout title="お問い合わせ">
    <div class="contact-form">
        <h1>お問い合わせフォーム</h1>
        <p>
            お問い合わせ内容をご記入の上、送信ボタンを押してください。折り返しメールにてご連絡いたします。
        </p>

        {
            submitted && submitSuccess ? (
                <div class="success-message">
                    <h3>送信完了</h3>
                    <p>
                        お問い合わせいただきありがとうございます。確認メールをお送りしましたのでご確認ください。
                    </p>
                    <p>内容を確認次第、担当者からご連絡いたします。</p>
                </div>
            ) : submitted && !submitSuccess ? (
                <div class="error-message">
                    <h3>送信エラー</h3>
                    <p>
                        {errorMessage ||
                            "送信に失敗しました。時間をおいて再度お試しください。"}
                    </p>
                    <button onclick="window.location.reload()">
                        再試行する
                    </button>
                </div>
            ) : (
                <form method="POST">
                    <label for="name">
                        お名前
                        <span class="required-mark">*</span>
                    </label>
                    <input
                        id="name"
                        type="text"
                        name="name"
                        placeholder="山田太郎"
                        required
                    />
                    {errors.name && <p class="error">{errors.name}</p>}

                    <label for="email">
                        メールアドレス
                        <span class="required-mark">*</span>
                    </label>
                    <input
                        id="email"
                        type="email"
                        name="email"
                        placeholder="example@mail.co.jp"
                        required
                    />
                    {errors.email && <p class="error">{errors.email}</p>}

                    <label for="msg">
                        お問い合わせ内容
                        <span class="required-mark">*</span>
                    </label>
                    <textarea
                        id="msg"
                        name="msg"
                        placeholder="お気軽にお問い合わせください。"
                        required
                    />
                    {errors.msg && <p class="error">{errors.msg}</p>}

                    {/* Turnstileウィジェット */}
                    <div id="turnstile-widget" class="turnstile-container" />
                    {errors.turnstile && (
                        <p class="error">{errors.turnstile}</p>
                    )}

                    <button id="submit-button" type="submit" disabled>
                        送信
                    </button>
                </form>
            )
        }
    </div>

    <hr />

    <p>弊部へのご連絡はSNS/メールアドレスからも可能です。</p>
    <a href="/social">SNS/メールアドレス一覧</a>
</Layout>

<script define:vars={{ siteKey: TURNSTILE_SITE_KEY }}>
    window.onloadTurnstileCallback = function () {
        turnstile.render("#turnstile-widget", {
            sitekey: siteKey,
            callback: function () {
                document
                    .getElementById("submit-button")
                    .removeAttribute("disabled");
            },
        });
    };
</script>

<script
    src="https://challenges.cloudflare.com/turnstile/v0/api.js?onload=onloadTurnstileCallback"
    async
    defer></script>

<style>
    .error {
        color: rgb(var(--red));
    }
    .success-message {
        background-color: rgba(var(--green), 0.1);
        border: 1px solid rgb(var(--green));
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }
    .error-message {
        background-color: rgba(var(--red), 0.1);
        border: 1px solid rgb(var(--red));
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }
    button {
        cursor: pointer;
    }
    .turnstile-container {
        margin: 1rem 0;
    }
    button[disabled] {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .contact-container {
        max-width: 64rem;
        margin: 0 auto;
    }

    .required-mark {
        color: rgb(var(--red));
        font-size: 0.8rem;
    }

    section {
        margin-bottom: 4rem;
    }

    h2 {
        border-bottom: 3px solid var(--surface0);
    }

    h4 {
        padding-bottom: 0.75rem;
        color: rgb(var(--text));
        letter-spacing: 0.05em;
    }

    .contact-container p {
        font-size: 1rem;
        opacity: 0.9;
        color: rgb(var(--subtext0));
        transition: color 0.3s ease;
    }

    form {
        display: grid;
        gap: 1rem;
        margin: 0 10%;
    }

    textarea {
        height: 10rem;
        background-color: rgb(var(--surface0));
        border: 2px solid rgb(var(--border));
        border-radius: 0.5rem;
        padding: 0.5rem;
        resize: none;
        transition: all 0.3s ease;
        color: rgb(var(--text));
    }
</style>
