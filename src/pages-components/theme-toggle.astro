---
import Icon from "@/src/components/root/Icon.astro";
import "@/src/styles/global.css";
---

<theme-toggle>
    <div class="theme-toggle-container">
        <button
            class="theme-toggle-button"
            aria-label="テーマ切り替え"
            aria-haspopup="true"
        >
            <span class="current-theme-icon">
                <span class="icon system">
                    <Icon icon="code" color="rgb(var(--text))" />
                </span>
                <span class="icon light">
                    <Icon icon="sun" color="rgb(var(--text))" />
                </span>
                <span class="icon dark">
                    <Icon icon="moon-stars" />
                </span>
            </span>
            <span class="current-theme-text">Auto</span>
        </button>
        <div class="theme-select" role="menu">
            <button class="theme-option" data-theme="system" role="menuitem">
                <span class="option-icon"><Icon icon="code" /></span>
                <span>Auto</span>
            </button>
            <button class="theme-option" data-theme="light" role="menuitem">
                <span class="option-icon"><Icon icon="sun" /></span>
                <span>Light</span>
            </button>
            <button class="theme-option" data-theme="dark" role="menuitem">
                <span class="option-icon"><Icon icon="moon-stars" /></span>
                <span>Dark</span>
            </button>
        </div>
    </div>
</theme-toggle>

<style>
    .theme-toggle-container {
        position: relative;
    }

    .theme-toggle-button {
        background-color: rgb(var(--surface0) / 0.2);
        border: 1px solid rgb(var(--overlay0) / 0.2);
        border-radius: 10px;
        padding: 0.6rem 1rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .current-theme-text {
        flex-grow: 1;
        text-align: left;
        font-size: 0.95rem;
        font-weight: 500;
        color: rgb(var(--text));
        margin: 0 0.5rem;
    }

    .dropdown-arrow {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .current-theme-icon {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .icon {
        position: relative;
        display: flex;
        width: 1.5rem;
        height: 1.5rem;
        scale: 1.6;
        color: rgb(var(--text));
    }

    .icon.hidden {
        display: none;
    }

    .theme-select {
        position: absolute;
        top: 100%;
        right: 0;
        margin-top: 0.5rem;
        background-color: rgb(var(--surface0));
        border: 1px solid rgb(var(--overlay0));
        border-radius: 1rem;
        padding: 0.6rem;
        display: none;
        flex-direction: column;
        min-width: 170px;
        z-index: 10;
    }

    .theme-select.active {
        display: flex;
    }

    .theme-option {
        background: none;
        border: none;
        padding: 0.8rem;
        text-align: left;
        cursor: pointer;
        border-radius: 0.8rem;
        color: rgb(var(--text));
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 0.3rem;
        justify-content: flex-start;
    }

    .theme-option:last-child {
        margin-bottom: 0;
    }

    .theme-option:hover {
        background-color: rgba(var(--overlay0) / 0.4);
    }

    .theme-option.active {
        background-color: rgba(var(--overlay1) / 0.4);
        font-weight: 500;
    }

    .option-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 1.8rem;
        height: 1.8rem;
        scale: 1.4;
        color: rgb(var(--text));
    }

    @media (max-width: 640px) {
        .theme-toggle-button {
            padding: 0.6rem 0.8rem;
            min-width: 120px;
        }

        .current-theme-text {
            font-size: 0.9rem;
        }
    }
</style>

<script>
    class ThemeToggle extends HTMLElement {
        constructor() {
            super();

            const STORAGE_KEY = "astro-theme";
            const button = this.querySelector(
                ".theme-toggle-button"
            )! as HTMLElement;
            const themeSelect = this.querySelector(".theme-select")!;
            const themeOptions = this.querySelectorAll(".theme-option");
            const systemIcon = this.querySelector(".icon.system")!;
            const lightIcon = this.querySelector(".icon.light")!;
            const darkIcon = this.querySelector(".icon.dark")!;
            const themeText = this.querySelector(
                ".current-theme-text"
            )! as HTMLElement;

            const themeNames = {
                system: "Auto",
                light: "Light",
                dark: "Dark",
            };

            const getThemePreference = (): "system" | "light" | "dark" => {
                const storedPreference = localStorage.getItem(STORAGE_KEY);
                if (
                    storedPreference === "system" ||
                    storedPreference === "light" ||
                    storedPreference === "dark"
                ) {
                    return storedPreference;
                }
                return "system";
            };

            const saveThemePreference = (
                theme: "system" | "light" | "dark"
            ) => {
                localStorage.setItem(STORAGE_KEY, theme);
            };

            const getSystemPreference = () => {
                return window.matchMedia("(prefers-color-scheme: dark)").matches
                    ? "dark"
                    : "light";
            };

            const updateThemeIcons = (theme: string, isDark: boolean) => {
                // すべてのアイコンを非表示にする
                systemIcon.classList.add("hidden");
                lightIcon.classList.add("hidden");
                darkIcon.classList.add("hidden");

                // 現在のテーマに応じたアイコンを表示
                if (theme === "system") {
                    // システムテーマの場合は、実際の明暗に応じたアイコンを表示
                    if (isDark) {
                        darkIcon.classList.remove("hidden");
                    } else {
                        lightIcon.classList.remove("hidden");
                    }
                } else if (theme === "light") {
                    lightIcon.classList.remove("hidden");
                } else if (theme === "dark") {
                    darkIcon.classList.remove("hidden");
                }
            };

            const applyTheme = (theme: "system" | "light" | "dark") => {
                let isDark = false;

                if (theme === "system") {
                    isDark = getSystemPreference() === "dark";
                } else {
                    isDark = theme === "dark";
                }

                document.documentElement.classList.toggle("theme-dark", isDark);

                // テーマ名のテキストを更新
                themeText.textContent = themeNames[theme];

                // アイコン表示を更新
                updateThemeIcons(theme, isDark);

                themeOptions.forEach((option) => {
                    option.classList.toggle(
                        "active",
                        option.getAttribute("data-theme") === theme
                    );
                });
            };

            // 初期テーマの適用
            const currentTheme = getThemePreference();
            applyTheme(currentTheme);

            // ボタンクリックでメニュー開閉
            button.addEventListener("click", () => {
                themeSelect.classList.toggle("active");
            });

            // テーマ選択
            themeOptions.forEach((option) => {
                option.addEventListener("click", () => {
                    const selectedTheme = option.getAttribute("data-theme") as
                        | "system"
                        | "light"
                        | "dark";
                    saveThemePreference(selectedTheme);
                    applyTheme(selectedTheme);
                    themeSelect.classList.remove("active");
                });
            });

            // システムテーマ変更の検出
            window
                .matchMedia("(prefers-color-scheme: dark)")
                .addEventListener("change", () => {
                    if (getThemePreference() === "system") {
                        applyTheme("system");
                    }
                });

            // 外部クリックでドロップダウンを閉じる
            document.addEventListener("click", (e) => {
                if (!this.contains(e.target as Node)) {
                    themeSelect.classList.remove("active");
                }
            });
        }
    }
    customElements.define("theme-toggle", ThemeToggle);
</script>
