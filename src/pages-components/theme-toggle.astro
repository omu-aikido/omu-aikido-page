---
import Icon from "@/src/components/root/Icon.astro";
import "@/src/styles/global.css";
---

<theme-toggle>
    <div class="theme-toggle-container">
        <button
            class="theme-toggle-button"
            aria-label="テーマ切り替え"
            aria-haspopup="true"
        >
            <span class="current-theme-icon">
                <span class="icon system">
                    <Icon icon="code" color="rgb(var(--text))" />
                </span>
                <span class="icon light">
                    <Icon icon="sun" color="rgb(var(--text))" />
                </span>
                <span class="icon dark">
                    <Icon icon="moon-stars" />
                </span>
            </span>
            <span class="current-theme-text">Auto</span>
        </button>
        <select class="theme-select" role="menu">
            <option class="theme-option" value="system" role="menuitem">
                Auto
            </option>
            <option class="theme-option" value="light" role="menuitem">
                Light
            </option>
            <option class="theme-option" value="dark" role="menuitem">
                Dark
            </option>
        </select>
    </div>
</theme-toggle>

<style>
    .theme-toggle-container {
        position: relative;
    }

    .theme-toggle-button {
        background-color: rgb(var(--surface0) / 0.2);
        border: 1px solid rgb(var(--overlay0) / 0.2);
        border-radius: 10px;
        padding: 0.6rem 1rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .current-theme-text {
        flex-grow: 1;
        text-align: left;
        font-size: 0.95rem;
        font-weight: 500;
        color: rgb(var(--text));
        margin: 0 0.5rem;
    }

    .dropdown-arrow {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .current-theme-icon {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .icon {
        position: relative;
        display: flex;
        width: 1.5rem;
        height: 1.5rem;
        scale: 1.6;
        color: rgb(var(--text));
    }

    .icon.hidden {
        display: none;
    }

    .theme-select {
        position: absolute;
        top: 0;
        left: 0;
        opacity: 0;
        width: 100%;
        height: 100%;
        cursor: pointer;
        z-index: 5;
    }

    .theme-option {
        color: rgb(var(--text));
    }

    @media (max-width: 640px) {
        .theme-toggle-button {
            padding: 0.6rem 0.8rem;
            min-width: 120px;
        }

        .current-theme-text {
            font-size: 0.9rem;
        }
    }
</style>

<script>
    class ThemeToggle extends HTMLElement {
        constructor() {
            super();

            const STORAGE_KEY = "astro-theme";
            const button = this.querySelector(
                ".theme-toggle-button"
            )! as HTMLElement;
            const themeSelect = this.querySelector(
                ".theme-select"
            )! as HTMLSelectElement;
            const systemIcon = this.querySelector(".icon.system")!;
            const lightIcon = this.querySelector(".icon.light")!;
            const darkIcon = this.querySelector(".icon.dark")!;
            const themeText = this.querySelector(
                ".current-theme-text"
            )! as HTMLElement;

            const themeNames = {
                system: "Auto",
                light: "Light",
                dark: "Dark",
            };

            const getThemePreference = (): "system" | "light" | "dark" => {
                const storedPreference = localStorage.getItem(STORAGE_KEY);
                if (
                    storedPreference === "system" ||
                    storedPreference === "light" ||
                    storedPreference === "dark"
                ) {
                    return storedPreference;
                }
                return "system";
            };

            const saveThemePreference = (
                theme: "system" | "light" | "dark"
            ) => {
                localStorage.setItem(STORAGE_KEY, theme);
            };

            const getSystemPreference = () => {
                return window.matchMedia("(prefers-color-scheme: dark)").matches
                    ? "dark"
                    : "light";
            };

            const updateThemeIcons = (theme: string, isDark: boolean) => {
                // すべてのアイコンを非表示にする
                systemIcon.classList.add("hidden");
                lightIcon.classList.add("hidden");
                darkIcon.classList.add("hidden");

                // 現在のテーマに応じたアイコンを表示
                if (theme === "system") {
                    systemIcon.classList.remove("hidden");
                } else if (theme === "light") {
                    lightIcon.classList.remove("hidden");
                } else if (theme === "dark") {
                    darkIcon.classList.remove("hidden");
                }
            };

            const applyTheme = (theme: "system" | "light" | "dark") => {
                let isDark = false;

                if (theme === "system") {
                    isDark = getSystemPreference() === "dark";
                } else {
                    isDark = theme === "dark";
                }

                document.documentElement.classList.toggle("theme-dark", isDark);

                // テーマ名のテキストを更新
                themeText.textContent = themeNames[theme];

                // selectの値を更新
                themeSelect.value = theme;

                // アイコン表示を更新
                updateThemeIcons(theme, isDark);
            };

            // 初期テーマの適用
            const currentTheme = getThemePreference();
            applyTheme(currentTheme);

            // ボタンのイベントは不要になった - selectが上に重なっているため

            // テーマ選択
            themeSelect.addEventListener("change", () => {
                const selectedTheme = themeSelect.value as
                    | "system"
                    | "light"
                    | "dark";
                saveThemePreference(selectedTheme);
                applyTheme(selectedTheme);
            });

            // システムテーマ変更の検出
            window
                .matchMedia("(prefers-color-scheme: dark)")
                .addEventListener("change", () => {
                    if (getThemePreference() === "system") {
                        applyTheme("system");
                    }
                });
        }
    }
    customElements.define("theme-toggle", ThemeToggle);
</script>
