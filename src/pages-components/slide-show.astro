---
export interface Props {
    interval?: number;
    showNavigation?: boolean;
    showIndicators?: boolean;
    autoplay?: boolean;
    // TODO: いつかスライド遷移を実装する
    transitionEffect?: "fade";
    enableSwipe?: boolean; // 新しいプロパティ：スワイプを有効にするかどうか
}

// デフォルト値の設定
const {
    interval = 5000,
    showNavigation = true,
    showIndicators = true,
    autoplay = true,
    transitionEffect = "fade",
    enableSwipe = true, // デフォルトでスワイプを有効化
} = Astro.props as Props;

const uniqueId = `slideshow-${Math.random().toString(36).substring(2, 9)}`;
---

<astro-slideshow
    id={uniqueId}
    data-interval={interval}
    data-autoplay={autoplay.toString()}
    data-show-nav={showNavigation.toString()}
    data-show-indicators={showIndicators.toString()}
    data-transition-effect={transitionEffect}
    data-enable-swipe={enableSwipe.toString()}
>
    <slot />
</astro-slideshow>

{/* コンポーネント用スタイル*/}
<style>
    astro-slideshow {
        display: block;
        width: 100%;
        position: relative;
        overflow: hidden;
    }
</style>

{/* Shadow DOM用スタイル (JS内で利用) */}
<template id="slideshow-styles">
    <style>
        :host {
            display: block;
            position: relative;
            width: 100%;
            max-width: 100%;
            margin: 0 auto;
            overflow: hidden;
            touch-action: pan-y pinch-zoom;
        }

        .slideshow-content {
            width: 100%;
            height: 100%;
            position: relative;
        }

        .slot-wrapper {
            position: relative;
            width: 100%;
            height: 100%;
        }

        /* 基本のスライド表示設定 */
        ::slotted(.slide) {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            opacity: 0;
            z-index: 1;
            transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
            transform: scale(1.1);
        }

        /* アクティブなスライド */
        ::slotted(.slide.active) {
            opacity: 1;
            z-index: 2;
            position: relative;
        }

        /* フェード効果 */
        :host([data-transition-effect="fade"]) ::slotted(.slide) {
            transform: scale(1.1);
            transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }

        /* アクティブなスライドの拡大アニメーション */
        ::slotted(.slide.active) {
            opacity: 1;
            z-index: 2;
            position: relative;
            transform: scale(1) !important;
        }

        .slide-nav {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            border: none;
            padding: 0.8rem 1rem;
            cursor: pointer;
            font-size: 1.2rem;
            border-radius: 50%;
            opacity: 0.1;
            transition: opacity 0.3s;
            width: 3rem;
            z-index: 2;
            background-color: rgba(255, 255, 255, 0.5);
            color: #333;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .slide-nav:hover {
            opacity: 0.5;
        }

        .prev {
            left: 10px;
        }

        .next {
            right: 10px;
        }

        .slide-indicators {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            z-index: 2;
        }

        .indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
            padding: 0;
            margin: 0;
            display: block;
            box-sizing: border-box;
            flex-shrink: 0; /* 縮小しないように */
            appearance: none;
            -webkit-appearance: none;
            outline: none;
            background-color: rgb(var(--crust) / 0.3); /* 半透明の白 */
            box-shadow: 0 2px 4px rgb(var(--shadow) / 0.4); /* 影を追加 */
        }

        .indicator.active {
            background-color: rgb(var(--base) / 0.8); /* アクティブ時は濃い白 */
        }

        /* モバイル対応スタイル */
        @media (max-width: 768px) {
            .slide-nav {
                padding: 0.6rem 0.8rem;
                width: 2rem;
                font-size: 1rem;
                opacity: 0.2;
            }

            .prev {
                left: 5px;
            }

            .next {
                right: 5px;
            }

            .indicator {
                width: 10px;
                height: 10px;
                margin: 0 3px;
            }

            .slide-indicators {
                bottom: 5px;
            }
        }

        /* 小さいスマホ向け */
        @media (max-width: 480px) {
            .slide-nav {
                padding: 0.4rem 0.6rem;
                width: 2rem;
            }

            .indicator {
                width: 8px;
                height: 8px;
                margin: 0 2px;
            }
        }
    </style>
</template>

<script>
    interface SlideOptions {
        interval: number;
        autoplay: boolean;
        showNav: boolean;
        showIndicators: boolean;
        transitionEffect: "fade" | "slide";
        enableSwipe: boolean;
    }

    interface TouchInfo {
        startX: number;
        startY: number;
        startTime: number;
        moved: boolean;
        direction: string | null;
    }

    class AstroSlideshow extends HTMLElement {
        #slideInterval: number | null = null;
        #currentIndex: number = 0;
        #previousIndex: number = -1;
        #slides: HTMLElement[] = [];
        #indicators: HTMLButtonElement[] = [];
        #prevButton: HTMLButtonElement | null = null;
        #nextButton: HTMLButtonElement | null = null;
        #indicatorsContainer: HTMLElement | null = null;
        #shadow: ShadowRoot;
        #transitionEffect: "fade" | "slide" = "fade";
        #touchInfo: TouchInfo | null = null;
        #enableSwipe: boolean = true;

        constructor() {
            super();
            // Shadow DOMを作成
            this.#shadow = this.attachShadow({ mode: "open" });
        }

        connectedCallback(): void {
            // パラメータ取得と型安全な変換
            const options: SlideOptions = {
                interval: parseInt(this.dataset.interval || "5000", 10),
                autoplay: this.dataset.autoplay !== "false",
                showNav: this.dataset.showNav !== "false",
                showIndicators: this.dataset.showIndicators !== "false",
                transitionEffect:
                    (this.dataset.transitionEffect as "fade" | "slide") ||
                    "fade",
                enableSwipe: this.dataset.enableSwipe !== "false",
            };

            this.#transitionEffect = options.transitionEffect;
            this.#enableSwipe = options.enableSwipe;

            // データ属性を設定してShadow DOMのCSSに反映
            this.setAttribute("data-transition-effect", this.#transitionEffect);

            // スライド要素を取得
            const lightSlides = Array.from(
                this.querySelectorAll<HTMLElement>(".slide")
            );
            const slidesCount = lightSlides.length;

            // スタイルの作成と追加
            this.#createStyles();

            // DOMの構築
            this.#buildDOM(options, slidesCount);

            // イベントリスナーの設定
            this.#setupEventListeners(options);

            // 初期表示
            if (this.#slides.length > 0) {
                this.#showSlide(0);

                // 自動再生
                if (options.autoplay && this.#slides.length > 1) {
                    this.#startAutoplay(options.interval);
                }
            }
        }

        disconnectedCallback(): void {
            // コンポーネント削除時に自動再生を停止
            this.#stopAutoplay();
        }

        #createStyles(): void {
            // HTMLから定義済みのスタイルテンプレートを取得
            const styleTemplate = document.getElementById(
                "slideshow-styles"
            ) as HTMLTemplateElement;
            if (styleTemplate && styleTemplate.content) {
                // テンプレートの内容をクローン
                const styles = styleTemplate.content.cloneNode(true);
                // Shadow DOMに追加
                this.#shadow.appendChild(styles);
            } else {
                // フォールバック: テンプレートが見つからない場合
                console.warn(
                    "スライドショーのスタイルテンプレートが見つかりませんでした"
                );
                const fallbackStyle = document.createElement("style");
                fallbackStyle.textContent = ":host { display: block; }";
                this.#shadow.appendChild(fallbackStyle);
            }
        }

        #buildDOM(options: SlideOptions, slidesCount: number): void {
            // メインコンテナの作成
            const container = document.createElement("div");
            container.className = "slideshow-content";

            // スロットラッパーの作成
            const slotWrapper = document.createElement("div");
            slotWrapper.className = "slot-wrapper";

            // スロットの作成
            const slot = document.createElement("slot");
            slotWrapper.appendChild(slot);
            container.appendChild(slotWrapper);

            // ナビゲーションボタンの追加
            if (options.showNav && slidesCount > 1) {
                // ナビゲーションボタン用コンテナを作成（スタイル調整しやすくするため）
                const navContainer = document.createElement("div");
                navContainer.className = "slide-nav-container";

                // 前のスライドボタン
                this.#prevButton = document.createElement("button");
                this.#prevButton.className = "slide-nav prev";
                this.#prevButton.setAttribute("aria-label", "前のスライド");
                this.#prevButton.innerHTML = "&#10094;";
                navContainer.appendChild(this.#prevButton);

                // 次のスライドボタン
                this.#nextButton = document.createElement("button");
                this.#nextButton.className = "slide-nav next";
                this.#nextButton.setAttribute("aria-label", "次のスライド");
                this.#nextButton.innerHTML = "&#10095;";
                navContainer.appendChild(this.#nextButton);

                container.appendChild(navContainer);
            }

            // インジケーターの追加
            if (options.showIndicators && slidesCount > 1) {
                this.#indicatorsContainer = document.createElement("div");
                this.#indicatorsContainer.className = "slide-indicators";

                for (let i = 0; i < slidesCount; i++) {
                    const indicator = document.createElement("button");
                    indicator.className = `indicator${i === 0 ? " active" : ""}`;
                    indicator.dataset.index = i.toString();
                    indicator.setAttribute("aria-label", `スライド ${i + 1}`);
                    this.#indicatorsContainer.appendChild(indicator);
                }

                container.appendChild(this.#indicatorsContainer);
            }

            // shadow DOMに追加
            this.#shadow.appendChild(container);
        }

        #setupEventListeners(options: SlideOptions): void {
            // メインスロットを取得
            const slot = this.#shadow.querySelector<HTMLSlotElement>("slot");

            // スロット内の要素のイベント処理
            if (slot) {
                slot.addEventListener("slotchange", () => {
                    // スライド要素を再取得
                    this.#slides = Array.from(
                        this.querySelectorAll<HTMLElement>(".slide")
                    );

                    if (this.#slides.length > 0) {
                        // インジケーターの数をスライドに合わせる
                        this.#updateIndicators(this.#slides.length);

                        // 初期状態設定
                        this.#showSlide(0);

                        // 自動再生
                        if (options.autoplay && this.#slides.length > 1) {
                            this.#startAutoplay(options.interval);
                        }
                    }
                });
            }

            // インジケーターのイベント設定
            if (this.#indicatorsContainer) {
                this.#indicators = Array.from(
                    this.#indicatorsContainer.querySelectorAll<HTMLButtonElement>(
                        ".indicator"
                    )
                );
                this.#setupIndicators(options);
            }

            // ナビゲーションボタンのイベント設定
            this.#setupNavButtons(options);

            // マウスオーバー時の自動再生停止
            if (options.autoplay) {
                this.addEventListener("mouseenter", () => this.#stopAutoplay());
                this.addEventListener("mouseleave", () =>
                    this.#startAutoplay(options.interval)
                );
            }

            // タッチイベントの設定（スワイプ対応）
            if (options.enableSwipe) {
                this.#setupTouchEvents();
            }
        }

        #setupTouchEvents(): void {
            const slotWrapper = this.#shadow.querySelector(".slot-wrapper");
            if (!slotWrapper) return;

            slotWrapper.addEventListener(
                "touchstart",
                (e: Event) => this.#handleTouchStart(e as TouchEvent),
                { passive: true }
            );
            slotWrapper.addEventListener(
                "touchmove",
                (e: Event) => this.#handleTouchMove(e as TouchEvent),
                { passive: true }
            );
            slotWrapper.addEventListener(
                "touchend",
                (e: Event) => this.#handleTouchEnd(e as TouchEvent),
                { passive: true }
            );
        }

        #handleTouchStart(e: TouchEvent): void {
            if (!this.#enableSwipe || this.#slides.length <= 1) return;

            const touch = e.touches[0];
            this.#touchInfo = {
                startX: touch.clientX,
                startY: touch.clientY,
                startTime: new Date().getTime(),
                moved: false,
                direction: null,
            };
        }

        #handleTouchMove(e: TouchEvent): void {
            if (!this.#touchInfo || !this.#enableSwipe) return;

            const touch = e.touches[0];
            const diffX = this.#touchInfo.startX - touch.clientX;
            const diffY = this.#touchInfo.startY - touch.clientY;

            // 水平方向の移動が垂直方向より大きい場合のみスワイプ判定
            if (Math.abs(diffX) > Math.abs(diffY)) {
                this.#touchInfo.moved = true;
                this.#touchInfo.direction = diffX > 0 ? "left" : "right";

                // ページスクロールを防止するためのイベントハンドリング
                e.preventDefault();
            }
        }

        #handleTouchEnd(e: TouchEvent): void {
            if (!this.#touchInfo || !this.#enableSwipe) return;

            const touchDuration =
                new Date().getTime() - this.#touchInfo.startTime;

            // 短い時間で一定以上動いた場合のみスワイプとみなす
            if (this.#touchInfo.moved && touchDuration < 300) {
                if (this.#touchInfo.direction === "left") {
                    this.#nextSlide();
                } else if (this.#touchInfo.direction === "right") {
                    this.#prevSlide();
                }
            }

            this.#touchInfo = null;
        }

        #updateIndicators(slideCount: number): void {
            if (this.#indicatorsContainer) {
                // すべてのインジケーターを取得
                this.#indicators = Array.from(
                    this.#indicatorsContainer.querySelectorAll<HTMLButtonElement>(
                        ".indicator"
                    )
                );

                // インジケーターの数がスライドの数と一致しない場合は更新
                if (this.#indicators.length !== slideCount) {
                    // 一度すべて削除
                    this.#indicatorsContainer.innerHTML = "";

                    // スライド数に合わせて新しく作成
                    for (let i = 0; i < slideCount; i++) {
                        const indicator = document.createElement("button");
                        indicator.className = `indicator${i === 0 ? " active" : ""}`;
                        indicator.dataset.index = i.toString();
                        indicator.setAttribute(
                            "aria-label",
                            `スライド ${i + 1}`
                        );
                        this.#indicatorsContainer.appendChild(indicator);
                    }

                    // インジケーター参照を更新
                    this.#indicators = Array.from(
                        this.#indicatorsContainer.querySelectorAll<HTMLButtonElement>(
                            ".indicator"
                        )
                    );

                    // インジケーターのイベントを再設定
                    this.#setupIndicators({
                        interval: parseInt(this.dataset.interval || "5000", 10),
                        autoplay: this.dataset.autoplay !== "false",
                        showNav: this.dataset.showNav !== "false",
                        showIndicators: this.dataset.showIndicators !== "false",
                        transitionEffect:
                            (this.dataset.transitionEffect as
                                | "fade"
                                | "slide") || "fade",
                        enableSwipe: this.dataset.enableSwipe !== "false",
                    });
                }
            }
        }

        #setupIndicators(options: SlideOptions): void {
            if (this.#indicatorsContainer) {
                this.#indicators.forEach((indicator, index) => {
                    indicator.addEventListener("click", () => {
                        this.#showSlide(index);
                        if (options.autoplay) {
                            this.#stopAutoplay();
                            this.#startAutoplay(options.interval);
                        }
                    });
                });
            }
        }

        #setupNavButtons(options: SlideOptions): void {
            if (this.#prevButton) {
                this.#prevButton.addEventListener("click", () => {
                    this.#prevSlide();
                    if (options.autoplay) {
                        this.#stopAutoplay();
                        this.#startAutoplay(options.interval);
                    }
                });
            }

            if (this.#nextButton) {
                this.#nextButton.addEventListener("click", () => {
                    this.#nextSlide();
                    if (options.autoplay) {
                        this.#stopAutoplay();
                        this.#startAutoplay(options.interval);
                    }
                });
            }
        }

        #showSlide(index: number): void {
            if (!this.#slides || this.#slides.length === 0) return;

            // 以前のスライドのインデックスを保存
            this.#previousIndex = this.#currentIndex;

            // スライド効果の場合、前のスライドに 'prev' クラスを追加
            if (this.#transitionEffect === "slide") {
                if (this.#previousIndex !== index && this.#previousIndex >= 0) {
                    this.#slides[this.#previousIndex].classList.add("prev");
                    // 少し遅延してから 'prev' クラスを削除
                    setTimeout(() => {
                        if (this.#slides[this.#previousIndex]) {
                            this.#slides[this.#previousIndex].classList.remove(
                                "active",
                                "prev"
                            );
                        }
                    }, 500); // トランジション時間と同じ
                }
            } else {
                // フェード効果の場合は単純に active クラスを削除
                this.#slides.forEach((slide) => {
                    slide.classList.remove("active");
                });
            }

            // インジケーターの状態更新
            if (this.#indicators.length > 0) {
                this.#indicators.forEach((indicator) => {
                    indicator.classList.remove("active");
                });

                if (this.#indicators[index]) {
                    this.#indicators[index].classList.add("active");
                }
            }

            // 新しいスライドに active クラスを追加
            if (this.#slides[index]) {
                // 既存のprevクラスがあれば削除
                this.#slides[index].classList.remove("prev");
                this.#slides[index].classList.add("active");
            }

            this.#currentIndex = index;
        }

        #nextSlide(): void {
            if (!this.#slides || this.#slides.length === 0) return;
            const newIndex = (this.#currentIndex + 1) % this.#slides.length;
            this.#showSlide(newIndex);
        }

        #prevSlide(): void {
            if (!this.#slides || this.#slides.length === 0) return;
            const newIndex =
                (this.#currentIndex - 1 + this.#slides.length) %
                this.#slides.length;
            this.#showSlide(newIndex);
        }

        #startAutoplay(interval: number): void {
            if (!this.#slides || this.#slides.length <= 1) return;
            this.#stopAutoplay(); // 既存のインターバルがあれば停止
            this.#slideInterval = window.setInterval(
                () => this.#nextSlide(),
                interval
            );
        }

        #stopAutoplay(): void {
            if (this.#slideInterval) {
                window.clearInterval(this.#slideInterval);
                this.#slideInterval = null;
            }
        }
    }

    // カスタム要素の登録
    if (!customElements.get("astro-slideshow")) {
        customElements.define("astro-slideshow", AstroSlideshow);
    }
</script>
