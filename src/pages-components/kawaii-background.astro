---

---

<div class="kawaii-background" aria-hidden="true">
    <div class="shape circle1"></div>
    <div class="shape circle2"></div>
    <div class="shape circle3"></div>
</div>

<script>
    function easeInOutQuartEnhanced(x: number): number {
        return x < 0.5
            ? 16 * x * x * x * x * x
            : 1 - Math.pow(-2 * x + 2, 5) / 2;
    }

    function calculateShapeTransform(
        scrollPosition: number,
        scrollVelocity: number,
        shapeIndex: number,
        isMobile: boolean,
        variation: number = 0
    ): string {
        const params = isMobile
            ? {
                  baseTransform:
                      shapeIndex === 0 ? -120 : shapeIndex === 1 ? -180 : -200,
                  moveRange: 550,
                  rotateRange: 800,
                  scaleRange: 0.9, // ランダム性を上げるためscaleRangeを大きく
                  velocityMultiplier: 1.2,
                  baseScale: 1.16, // 3%ほど控えめに
                  waveMultiplier: 1.2, // ランダム性を上げる
                  velocityScaleEffect: 0.12, // 動きの反応を上げる
                  scrollFactor: 0.2,
                  randomFactor: 0.15, // 新たにランダム性係数を追加
              }
            : {
                  baseTransform:
                      shapeIndex === 0 ? -150 : shapeIndex === 1 ? -200 : -250,
                  moveRange: 400,
                  rotateRange: 720,
                  scaleRange: 0.6, // ランダム性を上げるためscaleRangeを大きく
                  velocityMultiplier: 0.85, // 少し反応を高める
                  baseScale: 1.16, // 3%ほど控えめに
                  waveMultiplier: 1.0, // ランダム性を上げる
                  velocityScaleEffect: 0.09, // 動きの反応を上げる
                  scrollFactor: 0.15,
                  randomFactor: 0.12, // 新たにランダム性係数を追加
              };

        const windowHeight = window.innerHeight;
        const windowWidth = window.innerWidth;

        const maxAllowedOffscreen = isMobile ? 50 : 50;
        const maxMovementX =
            windowWidth * (isMobile ? 0.5 : 0.3) + maxAllowedOffscreen;
        const maxMovementY =
            windowHeight * (isMobile ? 0.4 : 0.2) + maxAllowedOffscreen;

        const aspectRatio = windowWidth / windowHeight;

        const aspectRatioFactor = aspectRatio / (16 / 9);

        const docHeight =
            Math.max(
                document.body.scrollHeight,
                document.body.offsetHeight,
                document.documentElement.scrollHeight,
                document.documentElement.offsetHeight
            ) - windowHeight;

        const shapeOffsets = [0.14, -0.17, 0.1];
        const shapeFactors = [0.55, 0.75, 0.45];

        const scrollCycleFactor = 1.4;

        let normalizedScroll =
            (scrollPosition / Math.max(1, docHeight)) * scrollCycleFactor;

        let scrollProgress = Math.max(0, normalizedScroll);

        const screenSizeAdjust = Math.max(
            0.8,
            Math.min(0.9, 1000 / windowWidth)
        );

        const cyclicOffsets = [
            Math.sin(normalizedScroll * Math.PI * 2.1) * 0.06,
            Math.cos(normalizedScroll * Math.PI * 1.9) * 0.08,
            Math.sin(normalizedScroll * Math.PI * 3.2) * 0.05,
        ];

        const noiseValue =
            Math.sin((Date.now() / 100) * (shapeIndex + 1)) *
            params.randomFactor;

        scrollProgress = Math.max(
            0,
            Math.min(
                1,
                (scrollProgress +
                    shapeOffsets[shapeIndex] +
                    cyclicOffsets[shapeIndex] +
                    noiseValue) *
                    shapeFactors[shapeIndex] *
                    screenSizeAdjust *
                    aspectRatioFactor
            )
        );

        const easedScroll = easeInOutQuartEnhanced(scrollProgress);

        const variationFactor = 1 + Math.max(-0.25, Math.min(0.25, variation)); // バリエーションの影響を強める

        const velocityInfluence =
            scrollVelocity *
            (shapeIndex === 1 ? -1 : 1) *
            (isMobile
                ? params.velocityMultiplier
                : params.velocityMultiplier * 1.5);

        const screenSizeMovementFactor = Math.min(
            1.0,
            Math.max(0.5, windowWidth / 1600)
        );

        const baseMovement =
            (params.baseTransform + params.moveRange * easedScroll) *
            screenSizeMovementFactor;

        const limitedBaseMovement = Math.max(
            -maxMovementX,
            Math.min(maxMovementX, baseMovement)
        );

        const movement = Math.max(
            -maxMovementX,
            Math.min(maxMovementX, limitedBaseMovement + velocityInfluence)
        );

        let baseRotation = params.rotateRange * easedScroll * variationFactor;
        if (!isMobile) {
            const frequency = [4, 3, 5][shapeIndex];
            baseRotation +=
                Math.sin(
                    scrollProgress * Math.PI * frequency * variationFactor
                ) * 30;
        }
        const rotation = baseRotation;

        const waveIntensity = isMobile ? 0.7 : 0.8;
        const waveFrequency = isMobile
            ? [2, 2.5, 1.8][shapeIndex]
            : [3, 3.5, 2.8][shapeIndex];
        const wave =
            Math.sin(
                scrollProgress * Math.PI * waveFrequency * variationFactor +
                    shapeIndex
            ) * waveIntensity;

        const minScale = isMobile ? 0.8 : 0.9;
        const maxScale = isMobile ? 1.3 : 1.5;
        const baseScale =
            params.baseScale +
            params.scaleRange * wave * params.waveMultiplier * variationFactor +
            Math.abs(scrollVelocity) * params.velocityScaleEffect;
        const scale = Math.max(minScale, Math.min(maxScale, baseScale));

        if (shapeIndex === 0) {
            const yMovement = movement / 4;
            const limitedYMovement = Math.max(
                -maxMovementY,
                Math.min(maxMovementY, yMovement)
            );

            return isMobile
                ? `translateX(${movement}px) rotate(${rotation}deg) scale(${scale})`
                : `translateX(${movement}px) translateY(${limitedYMovement}px) rotate(${rotation}deg) scale(${scale})`;
        } else if (shapeIndex === 1) {
            const yMovement = -movement / 3;
            const limitedYMovement = Math.max(
                -maxMovementY,
                Math.min(maxMovementY, yMovement)
            );

            return isMobile
                ? `translateX(${-movement}px) rotate(${-rotation}deg) scale(${scale})`
                : `translateX(${-movement}px) translateY(${limitedYMovement}px) rotate(${-rotation}deg) scale(${scale})`;
        } else {
            const xMovement = movement / 2;
            const limitedXMovement = Math.max(
                -maxMovementX,
                Math.min(maxMovementX, xMovement)
            );

            const yMovement = isMobile ? -movement : -movement * 1.2;
            const limitedYMovement = Math.max(
                -maxMovementY,
                Math.min(maxMovementY, yMovement)
            );

            return isMobile
                ? `translateX(${limitedXMovement}px) translateY(${limitedYMovement}px) rotate(${rotation / 2}deg) scale(${scale})`
                : `translateX(${limitedXMovement}px) translateY(${limitedYMovement}px) rotate(${rotation / 2}deg) scale(${scale})`;
        }
    }

    let lastScrollPosition = window.scrollY;
    let scrollVelocity = 0;
    let targetScrollVelocity = 0;
    let lastTimestamp = performance.now();
    const velocityFactor = 0.08;
    const velocitySmoothing = 0.92;
    let animationFrameId: number | null = null;
    let isProcessingFrame = false;
    let needsUpdate = false;

    let scrollVariation = 0;
    let variationDirection = 1;
    let shapeRandomFactors = [Math.random(), Math.random(), Math.random()];

    function updateShapesFromScroll(timestamp = performance.now()) {
        if (isProcessingFrame) {
            needsUpdate = true;
            return;
        }

        isProcessingFrame = true;
        animationFrameId = null;

        const currentScroll = window.scrollY;
        const scrollDelta = currentScroll - lastScrollPosition;
        const deltaTime = timestamp - lastTimestamp;

        targetScrollVelocity =
            (scrollDelta / Math.max(deltaTime, 16)) * velocityFactor * 1000;
        scrollVelocity =
            scrollVelocity * velocitySmoothing +
            targetScrollVelocity * (1 - velocitySmoothing);

        lastScrollPosition = currentScroll;
        lastTimestamp = timestamp;

        scrollVariation += (Math.random() * 0.08 - 0.04) * variationDirection;

        shapeRandomFactors = shapeRandomFactors.map(
            (factor) => factor + (Math.random() * 0.2 - 0.1)
        );

        if (Math.abs(scrollVariation) > 0.3) {
            variationDirection *= -1;
            scrollVariation *= 0.8;
        }

        const isMobile = !window.matchMedia("(min-width: 815px)").matches;
        const shapes = document.querySelectorAll(".shape");

        shapes.forEach((shape, index) => {
            const shapeVariation = scrollVariation * shapeRandomFactors[index];

            const transform = calculateShapeTransform(
                currentScroll,
                scrollVelocity,
                index,
                isMobile,
                shapeVariation
            );

            (shape as HTMLElement).style.transform = transform;
        });

        isProcessingFrame = false;

        if (needsUpdate) {
            needsUpdate = false;
            requestAnimationFrame(updateShapesFromScroll);
        }
    }

    function scheduleUpdate() {
        if (animationFrameId === null) {
            animationFrameId = requestAnimationFrame(updateShapesFromScroll);
        } else {
            needsUpdate = false;
        }
    }

    window.addEventListener("scroll", scheduleUpdate);
    window.addEventListener("resize", scheduleUpdate);

    window.addEventListener("beforeunload", () => {
        if (animationFrameId !== null) {
            cancelAnimationFrame(animationFrameId);
        }
    });

    function randomizeCirclePositions() {
        const circles = document.querySelectorAll(".shape");
        const isMobile = !window.matchMedia("(min-width: 815px)").matches;

        shapeRandomFactors = [Math.random(), Math.random(), Math.random()];

        circles.forEach((circle, index) => {
            let leftPos, topPos;

            if (index === 0) {
                leftPos = Math.random() * 30 - 8;
                topPos = Math.random() * 25 + 10;
            } else if (index === 1) {
                leftPos = Math.random() * 30 + 65;
                topPos = Math.random() * 30 + 25;
            } else {
                leftPos = Math.random() * 45 + 25;
                topPos = Math.random() * 28 + 42;
            }

            if (isMobile) {
                leftPos = leftPos * 0.9 + 5;
                topPos = Math.min(topPos, 80);
            }

            if (index === 1) {
                (circle as HTMLElement).style.right = `${100 - leftPos}vw`;
                (circle as HTMLElement).style.left = "auto";
            } else {
                (circle as HTMLElement).style.left = `${leftPos}vw`;
                (circle as HTMLElement).style.right = "auto";
            }

            (circle as HTMLElement).style.top = `${topPos}%`;
        });

        if (!window.scrollY) {
            const initialScroll = Math.random() * 0.3;

            // 各形状の変形を計算
            const isMobile = !window.matchMedia("(min-width: 815px)").matches;
            circles.forEach((circle, index) => {
                const transform = calculateShapeTransform(
                    initialScroll * document.body.scrollHeight,
                    0,
                    index,
                    isMobile,
                    shapeRandomFactors[index] * 0.5
                );

                (circle as HTMLElement).style.transform = transform;
            });
        }

        if (animationFrameId === null) {
            animationFrameId = requestAnimationFrame(updateShapesFromScroll);
        }
    }

    document.addEventListener("astro:page-load", () => {
        randomizeCirclePositions();
    });
</script>

<style>
    .kawaii-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
        overflow: hidden;
        animation: feadIn 3s 1 0s forwards ease;
    }

    @keyframes feadIn {
        from {
            opacity: 0;
            transform: translateY(20dvh);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    .shape {
        position: absolute;
        border-radius: 50%;
        background: rgb(var(--blue));
        transition: transform 0.8s cubic-bezier(0.34, 1.56, 0.64, 1);
        will-change: transform, scale, rotate, opacity, filter;
        backface-visibility: hidden;
        transform-style: preserve-3d;
    }

    .circle1 {
        width: clamp(175px, 24vw, 340px);
        height: clamp(175px, 24vw, 340px);
        left: -5vw;
        top: 20%;
        background: linear-gradient(
            45deg,
            rgb(var(--blue)),
            rgb(var(--sapphire)),
            rgb(var(--lavender))
        );
        animation: pulse1 15s infinite alternate;
    }

    .circle2 {
        width: clamp(145px, 24vw, 290px); /* 3%ほど小さく */
        height: clamp(145px, 24vw, 290px);
        right: -8vw;
        top: 40%;
        background: linear-gradient(
            -45deg,
            rgb(var(--mauve)),
            rgb(var(--pink)),
            rgb(var(--rosewater))
        );
        animation: pulse2 12s infinite alternate;
    }

    .circle3 {
        width: clamp(175px, 27vw, 340px); /* 3%ほど小さく */
        height: clamp(175px, 27vw, 340px);
        left: 45%;
        top: 60%;
        background: linear-gradient(
            135deg,
            rgb(var(--teal)),
            rgb(var(--sky)),
            rgb(var(--sapphire))
        );
        animation: pulse3 18s infinite alternate;
    }

    @keyframes pulse1 {
        0% {
            opacity: 0.28; /* 僅かに不透明度を下げる */
            filter: blur(0) hue-rotate(0deg);
        }
        50% {
            filter: blur(1px) hue-rotate(45deg);
        }
        100% {
            opacity: 0.14; /* 僅かに不透明度を下げる */
            filter: blur(2px) hue-rotate(90deg);
        }
    }

    @keyframes pulse2 {
        0% {
            opacity: 0.48; /* 僅かに不透明度を下げる */
            filter: blur(5px) hue-rotate(0deg);
        }
        50% {
            filter: blur(2.5px) hue-rotate(-45deg);
        }
        100% {
            opacity: 0.24; /* 僅かに不透明度を下げる */
            filter: blur(0) hue-rotate(-90deg);
        }
    }

    @keyframes pulse3 {
        0% {
            opacity: 0.24; /* 僅かに不透明度を下げる */
            filter: blur(0) hue-rotate(0deg);
        }
        50% {
            filter: blur(4px) hue-rotate(22.5deg);
        }
        100% {
            opacity: 0.14; /* 僅かに不透明度を下げる */
            filter: blur(8px) hue-rotate(45deg);
        }
    }
</style>
