---

---

<div class="geometric-background" aria-hidden="true">
    <div class="shape circle1"></div>
    <div class="shape circle2"></div>
    <div class="shape circle3"></div>
</div>

<script>
    function easeOutQuart(x: number): number {
        return 1 - Math.pow(1 - x, 4);
    }

    function calculateShapeTransform(
        cumulativeScrollAmount: number,
        scrollVelocity: number,
        shapeIndex: number,
        isMobile: boolean,
        variation: number = 0
    ): string {
        const params = isMobile
            ? {
                  baseTransform:
                      shapeIndex === 0 ? -150 : shapeIndex === 1 ? -100 : -125,
                  moveRange: 300,
                  rotateRange: 360,
                  scaleRange: 0.3,
                  velocityMultiplier: 0.5,
                  baseScale: 1,
                  waveMultiplier: 0.5,
                  velocityScaleEffect: 0.05,
                  scrollFactor: 0.1,
              }
            : {
                  baseTransform:
                      shapeIndex === 0 ? -300 : shapeIndex === 1 ? -200 : -250,
                  moveRange: 600,
                  rotateRange: 720,
                  scaleRange: 0.5,
                  velocityMultiplier: 0.8,
                  baseScale: 1.2,
                  waveMultiplier: 0.8,
                  velocityScaleEffect: 0.08,
                  scrollFactor: 0.15,
              };

        // スクロール量を適切な範囲に正規化
        const normalizedScroll =
            (cumulativeScrollAmount * params.scrollFactor) % 1000;
        // 0～1の範囲に変換
        const scrollCycle = (normalizedScroll / 1000) % 1;
        const easedScroll = easeOutQuart(scrollCycle);

        const variationFactor = 1 + Math.max(-0.2, Math.min(0.2, variation));

        const velocityInfluence =
            scrollVelocity *
            (shapeIndex === 1 ? -1 : 1) *
            (isMobile
                ? params.velocityMultiplier
                : params.velocityMultiplier * 1.5);

        // 動きの制限を大幅に緩和
        const baseMovement =
            params.baseTransform +
            params.moveRange * easedScroll * variationFactor;
        const movement = baseMovement + velocityInfluence;

        // 回転の制限を撤廃
        let baseRotation = params.rotateRange * easedScroll * variationFactor;
        if (!isMobile) {
            baseRotation +=
                Math.sin(scrollCycle * Math.PI * 4 * variationFactor) * 30;
        }
        const rotation = baseRotation;

        const waveIntensity = isMobile ? 0.7 : 0.8;
        const wave =
            Math.sin(
                scrollCycle * Math.PI * (isMobile ? 2 : 3) * variationFactor +
                    shapeIndex
            ) * waveIntensity;

        const minScale = isMobile ? 0.8 : 0.9;
        const maxScale = isMobile ? 1.3 : 1.5;
        const baseScale =
            params.baseScale +
            params.scaleRange * wave * params.waveMultiplier * variationFactor +
            Math.abs(scrollVelocity) * params.velocityScaleEffect;
        const scale = Math.max(minScale, Math.min(maxScale, baseScale));

        if (shapeIndex === 0) {
            return isMobile
                ? `translateX(${movement}px) rotate(${rotation}deg) scale(${scale})`
                : `translateX(${movement}px) translateY(${movement / 4}px) rotate(${rotation}deg) scale(${scale})`;
        } else if (shapeIndex === 1) {
            return isMobile
                ? `translateX(${-movement}px) rotate(${-rotation}deg) scale(${scale})`
                : `translateX(${-movement}px) translateY(${-movement / 3}px) rotate(${-rotation}deg) scale(${scale})`;
        } else {
            return isMobile
                ? `translateX(${movement / 2}px) translateY(${-movement}px) rotate(${rotation / 2}deg) scale(${scale})`
                : `translateX(${movement / 2}px) translateY(${-movement * 1.2}px) rotate(${rotation / 2}deg) scale(${scale})`;
        }
    }

    let lastScrollPosition = window.scrollY;
    let scrollVelocity = 0;
    let targetScrollVelocity = 0;
    let cumulativeScrollAmount = 0;
    let lastTimestamp = performance.now();
    const velocityFactor = 0.08;
    const velocitySmoothing = 0.92;
    let animationFrameId: number | null = null;

    let scrollVariation = 0;
    let variationDirection = 1;
    let shapeRandomFactors = [Math.random(), Math.random(), Math.random()];
    let lastShapePositions = [
        { x: 0, y: 0, rotation: 0, scale: 1 },
        { x: 0, y: 0, rotation: 0, scale: 1 },
        { x: 0, y: 0, rotation: 0, scale: 1 },
    ];

    function updateShapesFromScroll(timestamp = performance.now()) {
        if (animationFrameId !== null) {
            cancelAnimationFrame(animationFrameId);
        }

        const currentScroll = window.scrollY;
        const scrollDelta = currentScroll - lastScrollPosition;
        const deltaTime = timestamp - lastTimestamp;

        // スムーズな速度計算
        targetScrollVelocity =
            (scrollDelta / Math.max(deltaTime, 16)) * velocityFactor * 1000;
        scrollVelocity =
            scrollVelocity * velocitySmoothing +
            targetScrollVelocity * (1 - velocitySmoothing);

        // スクロール量を累積 (より滑らかな累積)
        cumulativeScrollAmount += Math.abs(scrollDelta) * 0.8;

        lastScrollPosition = currentScroll;
        lastTimestamp = timestamp;

        // より滑らかな変化
        scrollVariation += (Math.random() * 0.08 - 0.04) * variationDirection;

        // 各形状の乱数要素も更新
        shapeRandomFactors = shapeRandomFactors.map(
            (factor) => factor + (Math.random() * 0.2 - 0.1)
        );

        // 変化が大きくなりすぎたら方向を反転
        if (Math.abs(scrollVariation) > 0.3) {
            variationDirection *= -1;
            scrollVariation *= 0.8;
        }

        const isMobile = !window.matchMedia("(min-width: 815px)").matches;
        const shapes = document.querySelectorAll(".shape");

        shapes.forEach((shape, index) => {
            // 各図形に個別のランダム要素を適用
            const shapeVariation = scrollVariation * shapeRandomFactors[index];

            const transform = calculateShapeTransform(
                cumulativeScrollAmount,
                scrollVelocity,
                index,
                isMobile,
                shapeVariation
            );

            (shape as HTMLElement).style.transform = transform;
        });

        // Schedule next frame
        animationFrameId = requestAnimationFrame(updateShapesFromScroll);
    }

    window.addEventListener("scroll", () => {
        if (animationFrameId === null) {
            animationFrameId = requestAnimationFrame(updateShapesFromScroll);
        }
    });

    window.addEventListener("resize", () => {
        if (animationFrameId === null) {
            animationFrameId = requestAnimationFrame(updateShapesFromScroll);
        }
    });

    // Cleanup
    window.addEventListener("beforeunload", () => {
        if (animationFrameId !== null) {
            cancelAnimationFrame(animationFrameId);
        }
    });

    function randomizeCirclePositions() {
        const circles = document.querySelectorAll(".shape");
        const isMobile = !window.matchMedia("(min-width: 815px)").matches;

        // 初期スクロール量をランダムに設定
        cumulativeScrollAmount = Math.random() * 1000;
        shapeRandomFactors = [Math.random(), Math.random(), Math.random()];

        circles.forEach((circle, index) => {
            let leftPos, topPos;

            if (index === 0) {
                // circle1
                leftPos = Math.random() * 30 - 20; // -20% ~ 10%
                topPos = Math.random() * 30 + 10; // 10% ~ 40%
            } else if (index === 1) {
                // circle2
                leftPos = Math.random() * 30 + 60; // 60% ~ 90%
                topPos = Math.random() * 30 + 25; // 25% ~ 55%
            } else {
                // circle3
                leftPos = Math.random() * 50 + 25; // 25% ~ 75%
                topPos = Math.random() * 30 + 45; // 45% ~ 75%
            }

            if (isMobile) {
                leftPos = leftPos * 0.8 + 10;
                topPos = Math.min(topPos, 85);
            }

            if (index === 1) {
                (circle as HTMLElement).style.right = `${100 - leftPos}vw`;
                (circle as HTMLElement).style.left = "auto";
            } else {
                (circle as HTMLElement).style.left = `${leftPos}vw`;
                (circle as HTMLElement).style.right = "auto";
            }

            (circle as HTMLElement).style.top = `${topPos}%`;
        });

        // 初期状態でも変形を適用
        if (animationFrameId === null) {
            animationFrameId = requestAnimationFrame(updateShapesFromScroll);
        }
    }

    document.addEventListener("astro:after-swap", () => {
        randomizeCirclePositions();
    });
</script>

<style>
    .geometric-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
        overflow: hidden;
        animation: feadIn 3s 1 0s forwards ease;
    }

    @keyframes feadIn {
        from {
            opacity: 0;
            transform: translateY(20dvh);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    .shape {
        position: absolute;
        border-radius: 50%;
        background: rgb(var(--blue));
        transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        will-change: transform, scale, rotate, opacity, filter;
        backface-visibility: hidden;
        transform-style: preserve-3d;
    }

    .circle1 {
        width: clamp(200px, 30vw, 400px);
        height: clamp(200px, 30vw, 400px);
        left: -10vw;
        top: 20%;
        background: linear-gradient(
            45deg,
            rgb(var(--blue)),
            rgb(var(--sapphire)),
            rgb(var(--lavender))
        );
        animation: pulse1 15s infinite alternate;
    }

    .circle2 {
        width: clamp(150px, 25vw, 300px);
        height: clamp(150px, 25vw, 300px);
        right: -8vw;
        top: 40%;
        background: linear-gradient(
            -45deg,
            rgb(var(--mauve)),
            rgb(var(--pink)),
            rgb(var(--rosewater))
        );
        animation: pulse2 12s infinite alternate;
    }

    .circle3 {
        width: clamp(180px, 28vw, 350px);
        height: clamp(180px, 28vw, 350px);
        left: 45%;
        top: 60%;
        background: linear-gradient(
            135deg,
            rgb(var(--teal)),
            rgb(var(--sky)),
            rgb(var(--sapphire))
        );
        animation: pulse3 18s infinite alternate;
    }

    @keyframes pulse1 {
        0% {
            opacity: 0.3;
            filter: blur(0) hue-rotate(0deg);
        }
        50% {
            filter: blur(1px) hue-rotate(45deg);
        }
        100% {
            opacity: 0.15;
            filter: blur(2px) hue-rotate(90deg);
        }
    }

    @keyframes pulse2 {
        0% {
            opacity: 0.5;
            filter: blur(5px) hue-rotate(0deg);
        }
        50% {
            filter: blur(2.5px) hue-rotate(-45deg);
        }
        100% {
            opacity: 0.25;
            filter: blur(0) hue-rotate(-90deg);
        }
    }

    @keyframes pulse3 {
        0% {
            opacity: 0.25;
            filter: blur(0) hue-rotate(0deg);
        }
        50% {
            filter: blur(4px) hue-rotate(22.5deg);
        }
        100% {
            opacity: 0.15;
            filter: blur(8px) hue-rotate(45deg);
        }
    }
</style>
