---
import {
    icsCalendarToObject,
    generateIcsCalendar,
    type VEvent,
    type VCalendar,
} from "ts-ics";

// イベント型の定義
interface CalendarEvent {
    summary: string;
    start: Date;
    end: Date | null;
}

// 現在の日時を取得
const now = new Date();

// ICSデータを取得する関数
async function fetchIcsData(
    start?: Date,
    end?: Date
): Promise<CalendarEvent[]> {
    const baseURL = "https://calendar.google.com/calendar/ical/";
    const deafult = "new.ocuaikido%40gmail.com/public/basic.ics";

    const targetUrl = `${baseURL}${deafult}`;
    try {
        const response = await fetch(targetUrl);

        const res = await response.text();
        const parsedData = icsCalendarToObject(res);
        const events: VEvent[] | undefined = parsedData.events;
        if (!events) {
            throw new Error("No events found in ICS data");
        }
        const filteredEvents = events.filter((event) => {
            const startDate =
                start ?? new Date(new Date().setHours(0, 0, 0, 0));
            const endDate =
                end ?? new Date(new Date().setMonth(new Date().getMonth() + 1));
            return (
                new Date(event.start.date) >= startDate &&
                (event.end
                    ? new Date(event.end.date) <= endDate
                    : new Date(event.start.date) <= endDate)
            );
        });
        const vCalendar: VCalendar = {
            version: "2.0",
            prodId: parsedData.prodId,
            method: parsedData.method,
            timezones: parsedData.timezones,
            events: filteredEvents,
        };
        const data = generateIcsCalendar(vCalendar);
        return parseIcsData(data);
    } catch (error) {
        console.error("Error fetching ICS data:", error);
        return [];
    }
}

// ICSデータをパースする関数
function parseIcsData(icsString: string): CalendarEvent[] {
    try {
        const parsedData = icsCalendarToObject(icsString);

        return (
            parsedData?.events?.map((event: VEvent) => ({
                summary: event.summary || "No Title",
                start: new Date(event.start.date),
                end: event.end?.date ? new Date(event.end.date) : null,
            })) || []
        );
    } catch (error) {
        console.error("Error parsing ICS data:", error);
        return [];
    }
}

// イベントを日付でフォーマットする関数
function formatEventDate(event: CalendarEvent): string {
    if (event.end && event.start.toDateString() !== event.end.toDateString()) {
        // 複数日イベント
        const startDate = event.start.toLocaleString("ja-JP", {
            month: "long",
            day: "numeric",
            weekday: "short",
            timeZone: "Asia/Tokyo",
        });
        const endDate = event.end.toLocaleString("ja-JP", {
            month: "long",
            day: "numeric",
            weekday: "short",
            timeZone: "Asia/Tokyo",
        });
        return `${startDate} ~ ${endDate}`;
    } else {
        // 単日イベント
        const startDate = event.start.toLocaleString("ja-JP", {
            month: "long",
            day: "numeric",
            weekday: "short",
            hour: "numeric",
            minute: "numeric",
            hour12: false,
            timeZone: "Asia/Tokyo",
        });
        const endTime =
            event.end?.toLocaleString("ja-JP", {
                hour: "numeric",
                minute: "numeric",
                hour12: false,
                timeZone: "Asia/Tokyo",
            }) || "";
        return `${startDate} ~ ${endTime}`;
    }
}

// イベントのCSS クラスを判定する関数
function getEventClass(summary: string): string {
    if (summary.includes("中百舌鳥")) return "sapphire";
    if (summary.includes("杉本")) return "green";
    return "";
}

// イベントを月ごとにグループ化する関数
function groupEventsByMonth(
    events: CalendarEvent[]
): Record<string, CalendarEvent[]> {
    return events.reduce((groups: Record<string, CalendarEvent[]>, event) => {
        const date = new Date(event.start);
        const yearMonth = `${date.toLocaleString("ja-JP", { year: "numeric", timeZone: "Asia/Tokyo" })}${date.toLocaleString(
            "ja-JP",
            { month: "numeric", timeZone: "Asia/Tokyo" }
        )}`;
        if (!groups[yearMonth]) groups[yearMonth] = [];
        groups[yearMonth].push(event);
        return groups;
    }, {});
}

// データの取得と処理
const events = await fetchIcsData();
const sortedEvents = events.sort(
    (a, b) => a.start.getTime() - b.start.getTime()
);
const groupedEvents = groupEventsByMonth(sortedEvents);
---

{
    sortedEvents.length === 0 ? (
        <div class="no-events">予定はありません</div>
    ) : (
        Object.entries(groupedEvents).map(([yearMonth, monthEvents]) => (
            <>
                <h2 class="month-header">{yearMonth}</h2>
                {monthEvents.map((event) => (
                    <div
                        class={`event ${event.start.toLocaleDateString("ja-JP", { timeZone: "Asia/Tokyo" }) === now.toLocaleDateString("ja-JP", { timeZone: "Asia/Tokyo" }) ? "today" : ""} ${event.start <= now && (!event.end || event.end >= now) ? "ongoing" : ""}`}
                    >
                        <div
                            class={`event-title ${getEventClass(event.summary)}`}
                        >
                            {event.summary}
                        </div>
                        <div class="event-time">{formatEventDate(event)}</div>
                    </div>
                ))}
            </>
        ))
    )
}

<style>
    .timeTable {
        max-width: 620px;
        margin: 2rem auto;
        padding: 1rem;
    }

    .event {
        min-width: 620px;
        background: rgb(var(--surface0));
        border-radius: 16px;
        padding: 1.8rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 15px rgb(var(--shadow) / 0.2);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 2px solid transparent;
        display: flex;
        align-items: center;
        flex-direction: row;
        justify-content: space-between;
    }

    .event-title {
        font-size: 1.3rem;
        font-weight: 700;
        letter-spacing: 0.5px;
        margin: 0.7rem 0;
    }

    .event-title.sapphire {
        color: rgb(var(--sapphire));
    }

    .event-title.green {
        color: rgb(var(--green));
    }

    .event-title {
        color: rgb(var(--maroon));
    }

    .event.today {
        border: 2px solid rgb(var(--sky));
    }

    .event.ongoing {
        background: rgb(var(--teal) / 0.2);
    }

    .event-time {
        color: rgb(var(--text));
        line-height: 1.5;
        margin: 0.7rem 0;
    }

    .no-events {
        text-align: center;
        color: rgb(var(--subtext0));
        padding: 2rem;
    }

    .month-header {
        margin-top: 2rem;
        margin-bottom: 1rem;
    }

    @media (max-width: 815px) {
        .event {
            min-width: 266px;
            background: rgb(var(--surface0));
            border-radius: 16px;
            padding: 1.2rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 15px rgb(var(--shadow) / 0.2);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 2px solid transparent;
            display: flex;
            flex-direction: column-reverse;
            align-items: flex-start;
        }
        .event-time {
            margin: 0;
        }
        .event-title {
            margin-bottom: 0;
        }

        .timeTable {
            padding: 0;
        }
    }
</style>
